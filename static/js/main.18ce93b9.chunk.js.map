{"version":3,"sources":["components/PortfolioDisplay/mountain.png","components/About/profile.jpg","pages/images/comicWireframe.PNG","components/NavTabs/NavTabs.js","components/JumbotronContainer/JumbotronContainer.js","components/About/About.js","components/PortfolioDisplay/PortfolioDisplay.js","pages/Home.js","pages/ProjectOne.js","pages/ProjectTwo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavTabs","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","class","size","className","JumbotronContainer","Jumbotron","About","Image","src","profile","PortfolioDisplay","mountain","fluid","onClick","window","location","Component","Home","ProjectOne","target","comicWireframe","ProjectTwo","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18ce93b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mountain.7df06cb6.png\";","module.exports = __webpack_public_path__ + \"static/media/profile.3872c4a3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/comicWireframe.efb4c71d.PNG\";","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { FaLinkedin, FaTwitterSquare, FaGithub } from \"react-icons/fa\";\r\nimport './nav-tabs.css'\r\n\r\nconst NavTabs = () => {\r\n    return (\r\n        <Navbar expand=\"lg\">\r\n            <Navbar.Brand href=\"/\">\r\n            Ashley Clarke</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav>\r\n                <Nav.Link href=\"/\">Home</Nav.Link>             \r\n                </Nav>\r\n            <Nav>\r\n                <NavDropdown title=\"Portfolio\" id=\"basic-nav-dropdown\">\r\n                <NavDropdown.Item href=\"/portfolio-one\">Project One: Comic Hero Finder</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/portfolio-two\">Project Two</NavDropdown.Item>\r\n                </NavDropdown>\r\n            </Nav>\r\n            <div class=\"icon\">\r\n            {/* Nav Bar icons, used font awesome */}\r\n                <FaLinkedin size={45} className=\"social-icons\"/>\r\n                <FaTwitterSquare size={45} className=\"social-icons\"/>\r\n                <FaGithub size={45} className=\"social-icons\"/>\r\n                </div>\r\n                </Navbar.Collapse>\r\n          </Navbar>\r\n    )\r\n}\r\n\r\nexport default NavTabs;\r\n","import React from 'react';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport './jumbotron.css';\r\n\r\nconst JumbotronContainer = () => {\r\n    return (\r\n        <Jumbotron />\r\n    )\r\n}\r\n\r\nexport default JumbotronContainer; ","import React from 'react';\r\nimport './about.css';\r\nimport profile from './profile.jpg';\r\nimport Image from 'react-bootstrap/Image';\r\n\r\n\r\nconst About = () => {\r\n    return (\r\n    <div className=\"container\">\r\n        <div className=\"profile-container\">\r\n            <Image src={profile} className=\"profile-img\"/>\r\n            <h4 className=\"about-title\">About Me</h4>\r\n            <p className=\"about-text\">I am a web developer and UW Coding bootcamp graduate with experience primarily in HTML, CSS, SQL, and Javascript. I have a strong interest in full-stack development, but am equally excited to work either on the front or back end. Additionally, I love spending my free time learning new programming skills and getting involved with the community. I love working collaboratively with a like-minded team to ensure optimal results for user-centered and technology-centered designs.</p>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from 'react';\r\nimport Image from 'react-bootstrap/Image';\r\nimport './portfolio-display.css';\r\nimport mountain from './mountain.png';\r\n\r\nclass PortfolioDisplay extends Component {\r\n  \r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"gallery\">\r\n                <h4 className=\"portfolio-title\">Portfolio</h4>\r\n                <h6 className=\"project-title\">Comic Hero Finder</h6>\r\n                    <Image src={mountain} fluid />\r\n                    <button className=\"btn btn-outline-dark\" onClick={()=> {\r\n                        window.location.href=\"/portfolio-one\"\r\n                    }}> See Project Details</button>\r\n                <h6 className=\"project-title\">Memory Game</h6>\r\n                    <Image src={mountain} fluid />\r\n                    <button className=\"btn btn-outline-dark\" onClick={()=> {\r\n                        window.location.href=\"/portfolio-two\"\r\n                    }}>See Project Details</button> \r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PortfolioDisplay;","import React, { Component } from 'react';\r\nimport JumbotronContainer from '../components/JumbotronContainer/JumbotronContainer';\r\nimport About from '../components/About/About';\r\nimport PortfolioDisplay from '../components/PortfolioDisplay/PortfolioDisplay';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n       <JumbotronContainer />\r\n       <About />\r\n       <PortfolioDisplay />\r\n         </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport Image from 'react-bootstrap/Image';\r\nimport comicWireframe from './images/comicWireframe.PNG';\r\nimport './styles/comic-wireframe.css';\r\nclass ProjectOne extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"page-one\">\r\n            <h1>Summary of app</h1>\r\n            <p>This app is a Comic Hero Finder. A user should be able to type a comic hero's name and infomation about them will display. Some features in the works will allow users to save and look up comics associated with a hero.</p>\r\n            <h5><strong>In progress Features</strong></h5>\r\n            <p>Congifure MongoDB \r\n                When a character is liked, they are saved to a list that a user can later look at.\r\n                Provide user login so saved characters are associated to user profile.\r\n                Ability to see comics associate to user.\r\n                Add in an api to look up video game characters.</p>\r\n            {/* Link to deployed site */}\r\n            <h5>Link to deployed site: <a href=\"https://rocky-headland-64193.herokuapp.com/\" target=\"_blank\">https://rocky-headland-64193.herokuapp.com/</a> </h5>\r\n            {/* Design Section */}\r\n            <h1>Design:</h1>\r\n            <div className=\"image-container\">\r\n            <Image className=\"comic-wireframe\" src={comicWireframe} />\r\n            </div>\r\n            {/* Design process explanation */}\r\n            <p>Before starting on the code I created a prototype with UXPin. This helped with fleshing out functionality ideas as well as how information and components should be rendered.</p>\r\n            {/* Tech section */}\r\n            <h1>Technologies Used:</h1>\r\n            {/* List for MERN stack */}\r\n            <ul><strong>MERN Stack</strong>\r\n                <li>React</li>\r\n                <li>MongoDB</li>\r\n                <li>Node.js</li>\r\n            </ul>\r\n            {/* List for packages used with Node */}\r\n            <ul><strong>Node Packages</strong>\r\n            <li>Express</li>\r\n            <li>Axios</li>\r\n            <li>CORS</li>\r\n            <li>Mongoose</li>\r\n            <li>Http-proxy-middleware</li>\r\n            </ul>\r\n            {/* Process Section */}\r\n            <h1>Process</h1>\r\n            <h5><strong>Why choose React?</strong></h5>\r\n            <p>A previous version of this project was made using jQuery. Nothing agaisnt jQuery, but it felt like code was getting repetitive in certain parts of the project such as the results display. React seemed like a better choice for scalability,readability, and overall maintainence of the project. This is escpecially true as new features are added.</p>\r\n            <h5><strong>Why choose MongoDB?</strong></h5>\r\n            <p>Flexibility! Since new features are being added to the project, MongoDB is really easy to configure and organize without having to worry about complex object-relational mapping(ORM). Additionally, there are cloud features such as MongoDB Atlas that allows for more secure storage of data.</p>\r\n            <h5><strong>Why choose Node?</strong></h5>\r\n            <p>Node with Express makes creating routes and using 3rd APIs easy. Use of NPM packages make it simpler to use multiple tools and modules. Additionally, an app can be built using only JavaScript, which did not require me learning another language.</p>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProjectOne;","import React, { Component } from 'react';\r\n\r\nclass ProjectTwo extends Component {\r\n    render() {\r\n        return (\r\n        <div>\r\n            <h1>Link to deployed site</h1>\r\n            <h1>Design of App</h1>\r\n            <h1>Stack</h1>\r\n            <h1>Process</h1>\r\n            <h1>Final Product</h1>\r\n        </div>  \r\n        )\r\n    }\r\n}\r\n\r\nexport default ProjectTwo;","import React, { Component } from 'react';\nimport './App.css';\nimport NavTabs from './components/NavTabs/NavTabs';\nimport JumbotronContainer from './components/JumbotronContainer/JumbotronContainer';\nimport About from './components/About/About';\nimport PortfolioDisplay from './components/PortfolioDisplay/PortfolioDisplay';\nimport { BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\nimport Home from './pages/Home';\nimport ProjectOne from './pages/ProjectOne';\nimport ProjectTwo from './pages/ProjectTwo';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n      <Router>\n      <NavTabs />\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/portfolio-one\" \n      component={ProjectOne} />\n      <Route exact path=\"/portfolio-two\" \n      component={ProjectTwo} />\n      </Router>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}